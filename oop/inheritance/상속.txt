객체지향에서의 상속은 일반적인 상속이 아니라 재사용과 확장으로 이해하는것이 맞다.

객체 지향에서 상속이란 확장, 세분화, 슈퍼 클래스 - 서브 클래스 개념으로 이해해야 한다.

상위 분류 - 하위 분류
================================================
                   동물
                    |
            포유류          조류
             |             |
         고래   박쥐     참새    펭귄
================================================
위로 갈수록 추상화, 일반화가 되었고
아래로 갈수록 구체화, 특수화가 되었다.

상속관계에서 반드시 만족해야 할 문장이 있다.
 * 하위 클래스는 상위 클래스다.

" 하위 클래스는 상위 클래스다." 로브트 C. 마틴이 주장하고 객체 지향 설계 5원칙 가운데 LSP를 나타내는 말이다.

상속은 확장이기 때문에 자바에서는 상속을 inheritance로 표현하지 않고 extends로 표현 하는 이유다.


** 객체 참조 변수명은 객체스럽게, 클래스 명은 클래스명답게 정하는 습관을 들이자.
    조류 bird = new 조류();
    이렇게 지으면 bird라는 단어 자체가 객체보다는 클래스, 즉 분류에 가깝기 때문에 틀렸다.


상속의 대표적인 예로 toString() 메소드가 있다.
클래스 상속구조에서 최상위 클래스는 Object이다.
그래서 모든 클래스는 결국 Object의 특성을 물려받는다. 그래서 어떤 클래스의 인스터스이든 상관 없이 toString()메소드가 가능하다.

* 다중상속

자바는 다중 상속을 지원하지 않는다.
"왜 자바는 다중 상속을 지원하지 않는가?"
다중 상속은 득실 관계에서 실이 더 많았기에 자바와 c#은 과감히 다중 상속을 포기했다. 대신 자바에서는 인터페이스를 도입해 다중 상속의 득은 취하고 실은 버렸다.

상속과 인터페이스(inheritance02)

상속은 is kind of로 번역 할 수 있다.

인터페이스는 be able to 로 번역 할 수 있다.

질문?
1. 상위 클래스는 하위 클래스에게 물려줄 특성이 많을수록 좋은가? 적을수록 좋은가?
    > 클래스는 상위 클래스에서 물력줄 특성이 풍부할수록 좋다.
2. 인터페이스는 구현을 강제할 메서드가 많을수록 좋을까? 적을수록 좋을까?
    > 인터페이스는 구현을 강제할 메서드의 개수가 적을수록 좋다.

객체 지향 설계 5원칙 중에서 상위 클래스가 풍부할수록 좋은 이유는 LSP이라고 설명할 수 있다.
반대로 인터페이스는 ISP에 따른 이유라고 설명할 수 있다.


상속과 메모리 (inheritance03)